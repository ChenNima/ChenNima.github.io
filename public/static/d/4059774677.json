{"data":{"allMarkdownRemark":{"edges":[{"node":{"excerpt":"当我们把应用部署在集群中的时候可以很方便地使用例如Istio的工具控制集群中的流量，例如熔断，灰度部署，蓝绿部署等功能。虽然当我们的集群部署在docker容器中但又没有Kubernetes环境时和等工具仍然可以用来帮助控制集群流量，但是简单的服务熔断/下线等操作可以借助工具快速地实现，而不用侵入应用代码或者部署额外的架构。 TL;DR 假设我们部署一个简单的docker容器服务Memcahced, 将服务暴露的端口转发至本地的端口 容器memcached的docker子网ip…","id":"56ba6297-965d-5bd0-9b74-72f8cfe74765","frontmatter":{"title":"使用iptables熔断docker container中的服务","date":"April 22, 2020","path":"/blackout-docker-container-with-iptables"}}},{"node":{"excerpt":"在React中，无论是否使用了Redux或其他状态管理框架，都无法避免在组件中处理异步请求。在不使用的情况下，其典型的流程为： 在中发起异步请求 调用在state中维护请求的loading状态，并根据此状态渲染加载动画 在异步请求resolve的时候调用将数据放到state中，并将loading状态置为false…","id":"6073dae4-6f66-53c9-8867-d57bff050bf7","frontmatter":{"title":"在React中将异步请求抽象为高阶组件(Typescript)","date":"September 09, 2019","path":"/with-async-data"}}},{"node":{"excerpt":"Kick off your project with this default boilerplate. This starter ships with the main Gatsby configuration files you might need to get up and running blazing fast with the blazing fast app generator for React. Have another more specific idea? You may…","id":"ec8b26a0-0e8d-5b5b-9223-e8a0d2861af2","frontmatter":{"title":"你好，世界","date":"September 03, 2019","path":"/hello-world2"}}}]}}}