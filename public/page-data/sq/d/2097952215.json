{"data":{"allMarkdownRemark":{"edges":[{"node":{"excerpt":"在前面的几篇文章中，我们结合代码介绍了关键信息提取(KIE)任务网络SDMGR(Spatial Dual-Modality Graph Reasoning for Key Information Extraction)的整个前向计算过程，包含了处理图片信息的主干网络U-Net，处理文字信息的LSTM，以及特征融合的图神经网络部分。今天就让我们继续看看SDMGR的损失函数以及模型评估部分吧。  1. 损失函数 损失函数部分的代码位于。我们先来看一下损失函数的前向计算： 相对而言，SDMGR…","id":"0042e7c3-aa7e-5110-9a0e-b172ab581350","frontmatter":{"title":"关键信息提取网络SDMGR代码详解(4): 损失函数与总结","date":"August 19, 2022","path":"/paddle-ocr-kie-sdmgr-loss-and-summary"}}},{"node":{"excerpt":"在上篇文章关键信息提取网络SDMGR代码详解(2): 数据处理与主干网络中我们结合代码介绍了PaddleOCR中用于关键信息提取(KIE)任务网络SDMGR(Spatial Dual-Modality Graph Reasoning for Key Information Extraction)的主干网络部分。今天我们了解对文字部分处理的循环神经网络LSTM与融合多模态特征后进行图推理的图神经网络模块。而这两个模块也是SDMGR网络中最重要也是最复杂的模块。  这两部分的代码都位于。…","id":"0cb56416-43e8-5daf-8707-054a767e4e46","frontmatter":{"title":"关键信息提取网络SDMGR代码详解(3): 循环神经网络与图神经网络","date":"July 12, 2022","path":"/paddle-ocr-kie-sdmgr-code-embedding-lstm-and-gnn"}}},{"node":{"excerpt":"在上篇文章关键信息提取网络SDMGR代码详解(1): 概览与应用中我们简单介绍了PaddleOCR中用于关键信息提取(KIE)任务网络SDMGR(Spatial Dual-Modality Graph Reasoning for Key Information Extraction)并且手动尝试使用预训练模型对WildReceipt数据集进行了推理。那这篇文章我们就从头开始对网络的代码实现逐步解读一下吧。…","id":"58ef7bc6-dede-58d4-b4a0-7341477c5db7","frontmatter":{"title":"关键信息提取网络SDMGR代码详解(2): 数据处理与主干网络","date":"July 06, 2022","path":"/paddle-ocr-kie-sdmgr-code-data-process-and-backbone"}}},{"node":{"excerpt":"在上篇文章Windows环境下利用WSL搭建GPU训练/推理PaddlePaddle神经网络环境中我们简单介绍了如何在Windows的WSL2环境中搭建PaddlePaddle的GPU训练/推理环境，那么这次就来结合代码一起来看看PaddleOCR中KIE模块: SDMGR网络的代码与如何推理/训练吧。 1. 什么是KIE任务与SDMGR网络 KIE(Key Infomation Extraction…","id":"0e73680e-cd36-55e2-9857-fc9bcf3363ef","frontmatter":{"title":"关键信息提取网络SDMGR代码详解(1): 概览与应用","date":"June 27, 2022","path":"/paddle-ocr-kie-sdmgr-code-overview-and-application"}}},{"node":{"excerpt":"TL;DR PaddlePaddle是百度出品的深度学习框架。基于PaddlePaddle百度还推出了PaddleOCR，PaddleNLP，PaddleHub等实用的工具。作为深度学习框架，自然也在多个平台支持基于GPU的模型训练和推理，其中也包括Windows平台。如果你想使用Windows系统训练神经网络模型，而又想获得Linux的开发体验的话，Windows Subsystem for Linux ()显然是一个不错的选择。如今英伟达的官方显卡驱动官方支持了在WSL系统内部调用CUDA…","id":"2298ddbb-1449-5aab-8a9e-d49fdb8660ad","frontmatter":{"title":"Windows环境下利用WSL搭建GPU训练/推理PaddlePaddle神经网络环境","date":"June 13, 2022","path":"/cuda-gpu-setup-for-paddle-on-windows-wsl"}}},{"node":{"excerpt":"在2021年8月31日，Docker官方发布了一条博客表明了Docker desktop即将进入订阅收费制模式，并给了一段缓冲期至到2022年1月31日。这也意味着从2022年2月1日开始，所有将Docker用于商业目的，公司规模大于250人或者年收大于一千万美元的公司必须缴纳订阅费用了。虽然个人，非盈利组织和教育机构并不会被收费，但除了Docker desktop之外，还有没有一个适用于Mac平台的容器解决方案以便于日常的开发工作呢？ 得益于Linux内核对于Namespace与Cgroup…","id":"9fa9809c-4888-5948-89ef-c78429849695","frontmatter":{"title":"Lima: Docker Desktop for Mac的平替？","date":"January 27, 2022","path":"/lima-alternative-docker-desktop-for-mac"}}},{"node":{"excerpt":"用户的权限管理对每个项目来说都至关重要。不同的业务场景决定了不同的权限管理需求，不同的技术栈也有不同的解决方案：如果你在写一个Ruby On Rails应用，那你可能会选择cancan， 如果你正在使用K8S，那你很可能需要与K8S的RBAC系统打交道。那如果你面对一个非常复杂的业务，需要实现极为灵活的权限配置，并且同时对接多个服务怎么办呢？谷歌的一致性全球授权系统Zanzibar以及其开源实现Ory/Keto或许可以帮到你。 Zanzibar 简介 Google Zanzibar是谷歌201…","id":"4bf70036-2819-5d86-9caa-d367cb1d5b37","frontmatter":{"title":"Zanzibar与Ory/Keto: 权限管理服务简介","date":"May 07, 2021","path":"/keto-permission-manager-introduction"}}},{"node":{"excerpt":"在上一篇文章中从零搭建AWS网络(一): VPC与Internet Gateway中，我们学习了如何从零开始搭建一套最简单的AWS网络并通过Internet Gateway来向公网提供服务。在文章的最后我留下了两个问题： 没有详细配置Security Group等安全措施，安全性无法得到保障 实例直接配置了公网ip地址，缺少安全性和可扩展性，占用宝贵的ip资源 在今天的文章里，我们就来通过添加ELB，NAT Gateway等设施来解决这些问题。…","id":"38c46b97-e60e-50cd-a9cc-554c7a9245dd","frontmatter":{"title":"从零搭建AWS网络(二): ELB与NAT Gateway","date":"April 19, 2021","path":"/aws-vpc-elb-and-nat-gateway"}}},{"node":{"excerpt":"AWS(Amazon Web Services)是由亚马逊公司所创建的云计算平台，向个人、企业和政府提供一系列包括信息技术基础架构和应用的服务，如存储、数据库、计算、机器学习等等。使用AWS部署云服务可以免去传统私有服务期运维的各种麻烦，可以方便地快速上线业务。但在AWS上部署服务，网络结构搭建是绕不开的话题，很多同学刚接触AWS的时候就被一堆诸如VPC, Internet Gateway, Nat Gateway的概念绕晕了，最后在AWS的console…","id":"5e8bdc95-95e7-5c9e-aa42-cef5605e4cfc","frontmatter":{"title":"从零搭建AWS网络(一): VPC与Internet Gateway","date":"December 18, 2020","path":"/aws-vpc-internet-gateway"}}},{"node":{"excerpt":"当我们把应用部署在集群中的时候可以很方便地使用例如Istio的工具控制集群中的流量，例如熔断，灰度部署，蓝绿部署等功能。虽然当我们的集群部署在docker容器中但又没有Kubernetes环境时和等工具仍然可以用来帮助控制集群流量，但是简单的服务熔断/下线等操作可以借助工具快速地实现，而不用侵入应用代码或者部署额外的架构。 TL;DR 假设我们部署一个简单的docker容器服务Memcahced, 将服务暴露的端口转发至本地的端口 容器memcached的docker子网ip…","id":"6d2ad53e-666f-5a16-b9b7-6526c916676a","frontmatter":{"title":"使用iptables熔断docker container中的服务","date":"April 22, 2020","path":"/blackout-docker-container-with-iptables"}}}]}}}